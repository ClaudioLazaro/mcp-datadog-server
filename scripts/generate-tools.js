import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { loadPostmanCollection, buildToolsFromPostman } from "../src/schema.js";
import { defaultSchemaPath } from "../src/paths.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, "..");

function sortByName(a, b) {
  return a.name.localeCompare(b.name);
}

async function generate() {
  const schemaPath = defaultSchemaPath();
  if (!fs.existsSync(schemaPath)) {
    throw new Error(`Schema not found at ${schemaPath}`);
  }

  const collection = loadPostmanCollection(schemaPath);
  const { tools, operationsByName, topLevelFolders } = buildToolsFromPostman(collection, {
    allowedFolders: null,
  });

  const operations = Array.from(operationsByName.values()).sort(sortByName);
  const toolSet = new Set(operations.map((op) => op.name));
  const sortedTools = tools
    .filter((tool) => toolSet.has(tool.name))
    .sort(sortByName);
  const sortedTopLevel = Array.from(new Set(topLevelFolders)).sort((a, b) => a.localeCompare(b));

  const banner = `// AUTOGENERATED FILE - run\n//   node scripts/generate-tools.js\n// to regenerate.\n// Source: datadog-api-collection-schema.json\n\n`;

  const content = `${banner}export const generatedTopLevelFolders = ${JSON.stringify(sortedTopLevel, null, 2)};\n\nexport const generatedOperations = ${JSON.stringify(operations, null, 2)};\n\nexport const generatedTools = ${JSON.stringify(sortedTools, null, 2)};\n\nexport const generatedOperationsByName = new Map(generatedOperations.map((op) => [op.name, op]));\n`;

  const targetPath = path.join(projectRoot, "src", "generatedTools.js");
  fs.writeFileSync(targetPath, content);
  console.log(`[generate-tools] Wrote ${operations.length} operations to ${targetPath}`);
}

await generate();
